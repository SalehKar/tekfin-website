// CommonJS
const nodemailer = require("nodemailer");

const HEADERS = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "Content-Type",
  "Content-Type": "application/json",
};

exports.handler = async (event) => {
  if (event.httpMethod === "OPTIONS") return { statusCode: 200, headers: HEADERS, body: "" };
  if (event.httpMethod !== "POST")
    return { statusCode: 405, headers: HEADERS, body: JSON.stringify({ error: "Method Not Allowed" }) };

  let body;
  try { body = JSON.parse(event.body || "{}"); }
  catch { return { statusCode: 400, headers: HEADERS, body: JSON.stringify({ error: "Invalid JSON" }) }; }

  const to = (body.email || "").trim();
  const recommendation = (body.recommendation || "").trim();
  const lang = String(body.lang || "en").toLowerCase();
  const subject =
    (body.subject && String(body.subject).trim()) ||
    (lang === "tr" ? "TekFin ‚Äì Yapay Zek√¢ Depolama √ñneriniz"
                   : "TekFin ‚Äì Your AI Storage Recommendation");
  const replyTo = (body.replyTo || "").trim();

  if (!to || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(to))
    return { statusCode: 400, headers: HEADERS, body: JSON.stringify({ error: "Valid email required" }) };
  if (!recommendation)
    return { statusCode: 400, headers: HEADERS, body: JSON.stringify({ error: "Missing recommendation" }) };

  // Env vars
  const { SMTP_HOST, SMTP_PORT, SMTP_USER, SMTP_PASS, FROM_EMAIL, ZOHO_DC } = process.env;
  if (!SMTP_USER || !SMTP_PASS) {
    return { statusCode: 500, headers: HEADERS, body: JSON.stringify({ error: "Missing SMTP_USER/SMTP_PASS" }) };
  }

  // Resolve host automatically if not set (Zoho EU/COM)
  const dc = String(ZOHO_DC || "").toLowerCase(); // "eu" | "com" | ""
  const resolvedHost = (SMTP_HOST && SMTP_HOST.trim()) || (dc === "eu" ? "smtp.zoho.eu" : "smtp.zoho.com");

  // Port/SSL
  const port = Number(SMTP_PORT || 465);
  const secure = port === 465; // SSL for 465, STARTTLS for 587

  const transportOptions = {
    host: resolvedHost,
    port,
    secure,
    auth: { user: SMTP_USER, pass: SMTP_PASS },
    ...(port === 587 ? { requireTLS: true } : {}),
    connectionTimeout: 15000,
    socketTimeout: 15000,
  };

  // From must equal SMTP_USER or an active alias on Zoho
  const fromAddr = (FROM_EMAIL && FROM_EMAIL.trim()) || SMTP_USER;

  // Build absolute logo URL from site env (works on previews too)
  const siteUrl = process.env.URL || process.env.DEPLOY_PRIME_URL || "https://www.tekfingroup.com";
  const logoUrl = `${siteUrl.replace(/\/+$/, "")}/logo.png`;

  // TEXT fallback
  const textBody = [
    (lang === "tr" ? "Yapay Zek√¢ Depolama √ñneriniz" : "Your AI Storage Recommendation"),
    "-------------------------------------------------",
    recommendation,
    "",
    `Sent: ${new Date().toISOString()}`,
    "",
    (lang === "tr" ? "Bu e-posta TekFin Storage Advisor tarafƒ±ndan olu≈üturuldu."
                   : "This email was generated by TekFin Storage Advisor.")
  ].join("\n");

  // HTML email
  const preheader = (lang === "tr"
    ? "ƒ∞htiya√ßlarƒ±nƒ±za g√∂re olu≈üturulmu≈ü depolama √∂nerisi."
    : "A storage recommendation tailored to your needs."
  );

  const htmlBody = `
  <!doctype html>
  <html lang="${lang}">
  <head>
    <meta charset="utf-8">
    <meta name="x-apple-disable-message-reformatting">
    <meta name="color-scheme" content="light dark">
    <meta name="supported-color-schemes" content="light dark">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>${escapeHtml(subject)}</title>
    <style>
      @media (prefers-color-scheme: dark) {
        .bg { background:#0b1220 !important; }
        .card { background:#0f172a !important; border-color:#1e293b !important; }
        .text { color:#e5e7eb !important; }
        .muted { color:#94a3b8 !important; }
        .brand { color:#60a5fa !important; }
        .btn { background:#2563eb !important; color:#fff !important; }
        .mono { background:#0b1220 !important; border-color:#1e293b !important; color:#e5e7eb !important; }
      }
      a { color:#2563eb; text-decoration:none; }
      .btn { display:inline-block; padding:10px 16px; background:#2563eb; color:#ffffff; border-radius:8px; font-weight:600; }
    </style>
  </head>
  <body class="bg" style="margin:0; padding:0; background:#f6f8fb;">
    <div style="display:none; overflow:hidden; line-height:1px; opacity:0; max-height:0; max-width:0;">
      ${escapeHtml(preheader)}
    </div>

    <table role="presentation" width="100%" border="0" cellspacing="0" cellpadding="0" style="background:#f6f8fb;">
      <tr>
        <td align="center" style="padding:24px;">

          <!-- Logo -->
          <img src="${escapeHtml(logoUrl)}" alt="TekFin Teknoloji" width="140" style="margin-bottom:16px; display:block;">

          <table role="presentation" width="600" class="card" border="0" cellspacing="0" cellpadding="0"
                 style="width:600px; max-width:100%; background:#ffffff; border:1px solid #e5e7eb; border-radius:12px; overflow:hidden;">
            <tr>
              <td style="padding:24px;">
                <h1 class="text" style="margin:0 0 4px; font-size:22px; line-height:28px; color:#0f172a;">
                  ${lang === "tr" ? "Yapay Zek√¢ Depolama √ñneriniz" : "Your AI Storage Recommendation"}
                </h1>
                <p class="muted" style="margin:0 0 16px; color:#64748b;">
                  TekFin Storage Advisor
                </p>

                <div class="mono" style="white-space:pre-wrap; font-family:ui-monospace, SFMono-Regular, Menlo, Consolas, 'Liberation Mono', monospace; font-size:14px; line-height:20px; background:#f8fafc; border:1px solid #e2e8f0; border-radius:8px; padding:12px; color:#0f172a;">
                  ${escapeHtml(recommendation)}
                </div>

                <p class="muted" style="margin:16px 0 24px; color:#64748b; font-size:12px;">
                  ${lang === "tr" ? "Bu √∂neri g√∂nderildi:" : "Sent:"} ${new Date().toISOString()}
                </p>

                <p class="text" style="margin:0 0 8px; color:#0f172a;">
                  ${lang === "tr" ? "Sorunuz mu var? Yanƒ±tla'ya tƒ±klayarak bize d√∂n√º≈ü yapabilirsiniz."
                                   : "Have questions? Just hit reply and we‚Äôll help."}
                </p>
              </td>
            </tr>
          </table>

          <!-- Footer -->
          <table role="presentation" width="600" style="width:600px; max-width:100%; margin-top:12px;">
            <tr>
              <td align="center" class="muted" style="color:#94a3b8; font-size:12px; line-height:18px;">
                <p style="margin:4px 0;">üìç Istanbul, T√ºrkiye</p>
                <p style="margin:4px 0;">‚òé +90 212 123 45 67</p>
                <p style="margin:4px 0;">‚úâ <a href="mailto:info@tekfingroup.com" style="color:#2563eb;">info@tekfingroup.com</a></p>
                <p style="margin:4px 0;"><a href="https://www.tekfingroup.com" style="color:#2563eb;">www.tekfingroup.com</a></p>
                <hr style="border:none; border-top:1px solid #e2e8f0; margin:12px 0;">
                <p style="margin:0; font-size:11px; color:#94a3b8;">
                  ${lang === "tr"
                    ? "TekFin'den haber ve promosyon almak i√ßin opt-in listesindesiniz. ƒ∞stemiyorsanƒ±z yanƒ±tlayarak veya ileti≈üim sayfamƒ±zdan √ßƒ±kabilirsiniz."
                    : "You are receiving this email because you opted in to receive updates and promotions from TekFin. You may unsubscribe anytime by replying or via our contact page."}
                </p>
              </td>
            </tr>
          </table>

        </td>
      </tr>
    </table>
  </body>
  </html>
  `;

  try {
    const transporter = nodemailer.createTransport(transportOptions);
    await transporter.verify();

    const info = await transporter.sendMail({
      from: fromAddr,
      to,
      subject,
      text: textBody,
      html: htmlBody,
      ...(replyTo ? { replyTo } : {}),
    });

    return { statusCode: 200, headers: HEADERS, body: JSON.stringify({ ok: true, id: info.messageId }) };
  } catch (e) {
    console.error("send-recommendation error:", e && e.response ? e.response : e);
    const msg = e?.message || e?.code || (e?.response && String(e.response)) || "Unknown error";
    return { statusCode: 502, headers: HEADERS, body: JSON.stringify({ error: msg }) };
  }
};

function escapeHtml(s) {
  return String(s)
    .replace(/&/g, "&amp;").replace(/</g, "&lt;")
    .replace(/>/g, "&gt;").replace(/"/g, "&quot;")
    .replace(/'/g, "&#039;");
}
